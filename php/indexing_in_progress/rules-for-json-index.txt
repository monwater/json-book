Rules for index entries:

Whole index is a single array, within which are the following:

"string" = index term (first level)

{"person":["surname","first name", "second name"]} = person to be search against surname only if the only surname in index BUT if multiple identical surnames use first names with logical combinations like initials to find entries in text

["array"] = array that follows a string, object or array should be considered a collection of subentries (level 2, 3, etc.) 
to the entry that immediately precedes it - use the array even if there is a single sub-entry

{"i":"book title"} = styling is the same as in body of book text

{"see also":"subatomic universe"} = refers to the entry that immediately precedes it

For titles or other words (beginning with a, an or the) that are reversed like Pregnant Widow, we can use the same approach as the "person" object. It might be:
{"reverse":["Pregnant Widow","The"]}
or rather:
{"reverse":{"i":["Pregnant Widow","The"]}}
which will search for The Pregnant Widow in the text. If however more specific object terms were used like:
{"book":["Pregnant Widow","The"]}
then the parser would also know to italicize. In addition, instead of {"i":"book title"} we could use {"book":["Pregnant Widow","The"]} and {"book":"Northanger Abbey"} reversing wherever an array exists but always italicizing.
It is not a question of either/or - all approaches to book titles can be used within a single parser - the book object would just save markup.

{"book":["Pregnant Widow","The"]} == {"reverse":{"i":["Pregnant Widow","The"]}}
{"book":"Northanger Abbey"} == {"i":"Northanger Abbey"}
